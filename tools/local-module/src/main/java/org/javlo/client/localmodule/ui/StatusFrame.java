package org.javlo.client.localmodule.ui;

import java.awt.SystemColor;
import java.util.List;

import javax.swing.JTable;

import org.javlo.client.localmodule.model.ServerConfig;
import org.javlo.client.localmodule.service.ConfigService;
import org.javlo.client.localmodule.service.I18nService;
import org.javlo.client.localmodule.service.ServerClientService;
import org.javlo.client.localmodule.service.ServiceFactory;

/**
 *
 * @author lg2dc
 */
public class StatusFrame extends javax.swing.JDialog {

	private static StatusFrame instance;

	public static void showDialog() {
		synchronized (ConfigFrame.class) {
			if (instance == null) {
				instance = new StatusFrame();
				instance.loadConfig();
				instance.setLocationRelativeTo(null);
				instance.setModalityType(ModalityType.APPLICATION_MODAL);
				instance.setVisible(true);
			} else {
				instance.toFront();
			}
		}
	}

	public static void onConfigChange() {
		if (instance != null) {
			instance.loadConfig();
		}
	}

	public static void onServerStatusChange(ServerConfig server) {
		if (instance != null) {
			instance.tblServersModel.fireTableRowsUpdated(instance.factory.getClient(server));
		}
	}

	private I18nService i18n = I18nService.getInstance();
	private ServiceFactory factory = ServiceFactory.getInstance();
	private ListTableModel<ServerClientService> tblServersModel;

	public StatusFrame() {
		initComponents();
		tblServers.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		tblServers.setGridColor(SystemColor.control);
		tblServers.setShowVerticalLines(false);
		tblServersModel = new ListTableModel<ServerClientService>(tblServers);
		tblServers.setModel(tblServersModel);
		tblServers.addColumn(new ListTableColumn<ServerClientService, String>(i18n.get("status.column.server"), 100) {
			private static final long serialVersionUID = 1L;
			@Override
			public String getValue(ServerClientService itemData) {
				return itemData.getServer().getLabel();
			}
		});
		tblServers.addColumn(new ListTableColumn<ServerClientService, String>(i18n.get("status.column.status"), 65) {
			private static final long serialVersionUID = 1L;
			@Override
			public String getValue(ServerClientService itemData) {
				return i18n.get("status.server." + itemData.getStatus().name().toLowerCase());
			}
		});
		tblServers.addColumn(new ListTableColumn<ServerClientService, String>(i18n.get("status.column.status-info"), 300) {
			private static final long serialVersionUID = 1L;
			@Override
			public String getValue(ServerClientService itemData) {
				return itemData.getStatusInfo();
			}
		});
	}

	private void loadConfig() {
		List<ServerClientService> items = tblServersModel.getItems();
		items.clear();
		ConfigService config = factory.getConfig();
		synchronized (config) {
			for (ServerConfig server : config.getBean().getServers()) {
				items.add(factory.getClient(server));
			}
		}
	}

	public void close() {
		synchronized (ConfigFrame.class) {
			this.setVisible(false);
			this.dispose();
			instance = null;
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		sclServers = new javax.swing.JScrollPane();
		tblServers = new javax.swing.JTable();
		btnClose = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		setTitle(i18n.get("status.title")); // NOI18N
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				formWindowClosing(evt);
			}
		});

		sclServers.setViewportView(tblServers);

		btnClose.setText(i18n.get("status.close")); // NOI18N
		btnClose.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnCloseActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(sclServers, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
												.addGap(0, 0, Short.MAX_VALUE)
												.addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(sclServers, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(btnClose)
								.addContainerGap())
				);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
		close();
	}//GEN-LAST:event_btnCloseActionPerformed

	private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		close();
	}//GEN-LAST:event_formWindowClosing

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnClose;
	private javax.swing.JScrollPane sclServers;
	private javax.swing.JTable tblServers;
	// End of variables declaration//GEN-END:variables

}
